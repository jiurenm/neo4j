// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Neo4j.proto

// option java_multiple_files = true;

package neo4j

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Input struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65f58bbae9de790, []int{0}
}

func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Req struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Relationship         string   `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65f58bbae9de790, []int{1}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Req) GetRelationship() string {
	if m != nil {
		return m.Relationship
	}
	return ""
}

type Output struct {
	Result               []*Result `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65f58bbae9de790, []int{2}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetResult() []*Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type Result struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Info                 string   `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65f58bbae9de790, []int{3}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Result) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Result) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*Input)(nil), "com.kid.neo4j.rpc.Input")
	proto.RegisterType((*Req)(nil), "com.kid.neo4j.rpc.Req")
	proto.RegisterType((*Output)(nil), "com.kid.neo4j.rpc.Output")
	proto.RegisterType((*Result)(nil), "com.kid.neo4j.rpc.Result")
}

func init() { proto.RegisterFile("Neo4j.proto", fileDescriptor_c65f58bbae9de790) }

var fileDescriptor_c65f58bbae9de790 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4d, 0x4b, 0xfb, 0x40,
	0x10, 0xc6, 0x69, 0xd2, 0x06, 0xfe, 0xd3, 0xd2, 0x3f, 0x5d, 0x45, 0xa2, 0x5e, 0x4a, 0x4e, 0x3d,
	0x05, 0xac, 0x5e, 0x44, 0x04, 0xdf, 0xad, 0x0a, 0x55, 0x52, 0xbf, 0xc0, 0x9a, 0x4c, 0xed, 0x6a,
	0xf7, 0xa5, 0x9b, 0x4d, 0xa1, 0x1f, 0xc3, 0x6f, 0x2c, 0xbb, 0x2d, 0xa2, 0x18, 0x3d, 0x98, 0xde,
	0x86, 0x67, 0x66, 0x7e, 0x79, 0xf2, 0x30, 0x0b, 0xcd, 0x21, 0xca, 0x83, 0x97, 0x58, 0x69, 0x69,
	0x24, 0xe9, 0xa4, 0x92, 0xc7, 0xaf, 0x2c, 0x8b, 0x85, 0x13, 0xb5, 0x4a, 0xa3, 0x5d, 0x68, 0xdc,
	0x08, 0x55, 0x18, 0x42, 0xa0, 0x2e, 0x28, 0xc7, 0xb0, 0xd6, 0xad, 0xf5, 0xfe, 0x25, 0xae, 0x8e,
	0x8e, 0xc1, 0x4f, 0x70, 0x56, 0xd6, 0x22, 0x11, 0xb4, 0x34, 0x4e, 0xa9, 0x61, 0x52, 0xe4, 0x13,
	0xa6, 0x42, 0xcf, 0xf5, 0xbe, 0x68, 0xd1, 0x11, 0x04, 0xf7, 0x85, 0xb1, 0xf0, 0x3d, 0x08, 0x34,
	0xe6, 0xc5, 0xd4, 0x84, 0xb5, 0xae, 0xdf, 0x6b, 0xf6, 0xb7, 0xe3, 0x6f, 0x4e, 0xe2, 0xc4, 0x0d,
	0x24, 0xab, 0xc1, 0xe8, 0x04, 0x82, 0xa5, 0x42, 0xda, 0xe0, 0xb1, 0xcc, 0x7d, 0xdc, 0x4f, 0x3c,
	0x96, 0x7d, 0xd8, 0xf1, 0x3e, 0xd9, 0x21, 0x50, 0x67, 0x62, 0x2c, 0x43, 0x7f, 0xa9, 0xd9, 0xba,
	0xff, 0xd6, 0x80, 0xd6, 0xb5, 0xa6, 0x6a, 0x32, 0x42, 0x3d, 0x67, 0x29, 0x92, 0x53, 0x80, 0x31,
	0x13, 0xd9, 0xd9, 0x62, 0x68, 0x57, 0xc2, 0x12, 0x0f, 0x2e, 0x8a, 0x9d, 0x9f, 0xdd, 0x91, 0x2b,
	0xf8, 0x6f, 0x11, 0xe7, 0xb4, 0xc8, 0xf1, 0x4f, 0x9c, 0x55, 0x20, 0xb7, 0xb0, 0x61, 0x39, 0x17,
	0x8c, 0x3e, 0x0b, 0x99, 0xb3, 0xbc, 0x0a, 0xeb, 0x12, 0xda, 0x96, 0x35, 0xa0, 0x9a, 0xaf, 0x01,
	0x33, 0x94, 0xa6, 0xd2, 0x9f, 0xdd, 0xc1, 0xa6, 0xc5, 0x3c, 0x68, 0x9c, 0xa3, 0xb0, 0xa7, 0x50,
	0x05, 0x36, 0x80, 0x8e, 0x85, 0x8d, 0x16, 0x5c, 0x19, 0xc9, 0xd7, 0x10, 0xf8, 0xa3, 0x46, 0x6a,
	0x38, 0x0a, 0x53, 0x85, 0x75, 0x08, 0x75, 0xcb, 0x22, 0x5b, 0xa5, 0x77, 0x32, 0xfb, 0x65, 0xf5,
	0x29, 0x70, 0x0f, 0x71, 0xff, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x75, 0x43, 0xf3, 0x40, 0x97, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphServiceClient interface {
	FindByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error)
	FindCauseByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	FindDiagnosisByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	FindHarmByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	FindNoteByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	FindPreventionByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	FindSymptomByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	FindTreatmentByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	Find(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Output, error)
}

type graphServiceClient struct {
	cc *grpc.ClientConn
}

func NewGraphServiceClient(cc *grpc.ClientConn) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) FindByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/findByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindCauseByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/findCauseByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindDiagnosisByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/findDiagnosisByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindHarmByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/findHarmByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindNoteByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/findNoteByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindPreventionByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/findPreventionByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindSymptomByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/findSymptomByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindTreatmentByName(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/findTreatmentByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Find(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/com.kid.neo4j.rpc.GraphService/find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServiceServer is the server API for GraphService service.
type GraphServiceServer interface {
	FindByName(context.Context, *Input) (*Result, error)
	FindCauseByName(context.Context, *Input) (*Output, error)
	FindDiagnosisByName(context.Context, *Input) (*Output, error)
	FindHarmByName(context.Context, *Input) (*Output, error)
	FindNoteByName(context.Context, *Input) (*Output, error)
	FindPreventionByName(context.Context, *Input) (*Output, error)
	FindSymptomByName(context.Context, *Input) (*Output, error)
	FindTreatmentByName(context.Context, *Input) (*Output, error)
	Find(context.Context, *Req) (*Output, error)
}

// UnimplementedGraphServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGraphServiceServer struct {
}

func (*UnimplementedGraphServiceServer) FindByName(ctx context.Context, req *Input) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByName not implemented")
}
func (*UnimplementedGraphServiceServer) FindCauseByName(ctx context.Context, req *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCauseByName not implemented")
}
func (*UnimplementedGraphServiceServer) FindDiagnosisByName(ctx context.Context, req *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDiagnosisByName not implemented")
}
func (*UnimplementedGraphServiceServer) FindHarmByName(ctx context.Context, req *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHarmByName not implemented")
}
func (*UnimplementedGraphServiceServer) FindNoteByName(ctx context.Context, req *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNoteByName not implemented")
}
func (*UnimplementedGraphServiceServer) FindPreventionByName(ctx context.Context, req *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPreventionByName not implemented")
}
func (*UnimplementedGraphServiceServer) FindSymptomByName(ctx context.Context, req *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSymptomByName not implemented")
}
func (*UnimplementedGraphServiceServer) FindTreatmentByName(ctx context.Context, req *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTreatmentByName not implemented")
}
func (*UnimplementedGraphServiceServer) Find(ctx context.Context, req *Req) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}

func RegisterGraphServiceServer(s *grpc.Server, srv GraphServiceServer) {
	s.RegisterService(&_GraphService_serviceDesc, srv)
}

func _GraphService_FindByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/FindByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindByName(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindCauseByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindCauseByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/FindCauseByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindCauseByName(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindDiagnosisByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindDiagnosisByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/FindDiagnosisByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindDiagnosisByName(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindHarmByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindHarmByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/FindHarmByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindHarmByName(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindNoteByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindNoteByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/FindNoteByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindNoteByName(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindPreventionByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindPreventionByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/FindPreventionByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindPreventionByName(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindSymptomByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindSymptomByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/FindSymptomByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindSymptomByName(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindTreatmentByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindTreatmentByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/FindTreatmentByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindTreatmentByName(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.kid.neo4j.rpc.GraphService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Find(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraphService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.kid.neo4j.rpc.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findByName",
			Handler:    _GraphService_FindByName_Handler,
		},
		{
			MethodName: "findCauseByName",
			Handler:    _GraphService_FindCauseByName_Handler,
		},
		{
			MethodName: "findDiagnosisByName",
			Handler:    _GraphService_FindDiagnosisByName_Handler,
		},
		{
			MethodName: "findHarmByName",
			Handler:    _GraphService_FindHarmByName_Handler,
		},
		{
			MethodName: "findNoteByName",
			Handler:    _GraphService_FindNoteByName_Handler,
		},
		{
			MethodName: "findPreventionByName",
			Handler:    _GraphService_FindPreventionByName_Handler,
		},
		{
			MethodName: "findSymptomByName",
			Handler:    _GraphService_FindSymptomByName_Handler,
		},
		{
			MethodName: "findTreatmentByName",
			Handler:    _GraphService_FindTreatmentByName_Handler,
		},
		{
			MethodName: "find",
			Handler:    _GraphService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Neo4j.proto",
}
